// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'db/objectbox.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 9050756299533494181),
    name: 'Document',
    lastPropertyId: const obx_int.IdUid(13, 8950696459568157375),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2663277142123545006),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7792431084536884749),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3490872785072763137),
        name: 'path',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7914938823217454250),
        name: 'length',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 1885726183315426123),
        name: 'parsed',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 885649435951606089),
        name: 'tags',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 1075066480903116717),
        name: 'chunks',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 905421107360809929),
        name: 'modelName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 4309183185114881544),
        name: 'lines',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 3324245000496020868),
        name: 'tokens',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 6663247131076862501),
        name: 'time',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 8950696459568157375),
        name: 'characters',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 7494708861948236679),
    name: 'DocumentChunk',
    lastPropertyId: const obx_int.IdUid(7, 7621660568695857611),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 385920591795847325),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3526320533653921916),
        name: 'documentId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4829892742788174861),
        name: 'content',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6519734770467666302),
        name: 'length',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 4657586527933538278),
        name: 'offset',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 7065832917335527966),
        name: 'tags',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 7621660568695857611),
        name: 'embedding',
        type: 28,
        flags: 8,
        indexId: const obx_int.IdUid(2, 5075093324013003195),
        hnswParams: obx_int.ModelHnswParams(dimensions: 1024, distanceType: 2),
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(3, 7494708861948236679),
    lastIndexId: const obx_int.IdUid(2, 5075093324013003195),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [9040188549526098184],
    retiredIndexUids: const [],
    retiredPropertyUids: const [
      7945762670151713382,
      6693480902182153074,
      7383642888205552793,
      715763136792720490,
      2529462370363360507,
      2848111422213662443,
      3285724021795709819,
      5144852761575768587,
      1703067598575696374,
    ],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Document: obx_int.EntityDefinition<Document>(
      model: _entities[0],
      toOneRelations: (Document object) => [],
      toManyRelations: (Document object) => {},
      getId: (Document object) => object.id,
      setId: (Document object, int id) {
        object.id = id;
      },
      objectToFB: (Document object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final pathOffset = fbb.writeString(object.path);
        final tagsOffset = fbb.writeList(
          object.tags.map(fbb.writeString).toList(growable: false),
        );
        final modelNameOffset = fbb.writeString(object.modelName);
        fbb.startTable(14);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, pathOffset);
        fbb.addInt64(3, object.length);
        fbb.addInt64(4, object.parsed);
        fbb.addOffset(5, tagsOffset);
        fbb.addInt64(6, object.chunks);
        fbb.addOffset(7, modelNameOffset);
        fbb.addInt64(8, object.lines);
        fbb.addInt64(10, object.tokens);
        fbb.addInt64(11, object.time);
        fbb.addInt64(12, object.characters);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object = Document()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..name = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 6, '')
          ..path = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 8, '')
          ..length = const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
          ..parsed = const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)
          ..tags = const fb.ListReader<String>(
            fb.StringReader(asciiOptimization: true),
            lazy: false,
          ).vTableGet(buffer, rootOffset, 14, [])
          ..chunks = const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)
          ..modelName = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 18, '')
          ..lines = const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0)
          ..tokens = const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0)
          ..time = const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0)
          ..characters = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            28,
            0,
          );

        return object;
      },
    ),
    DocumentChunk: obx_int.EntityDefinition<DocumentChunk>(
      model: _entities[1],
      toOneRelations: (DocumentChunk object) => [],
      toManyRelations: (DocumentChunk object) => {},
      getId: (DocumentChunk object) => object.id,
      setId: (DocumentChunk object, int id) {
        object.id = id;
      },
      objectToFB: (DocumentChunk object, fb.Builder fbb) {
        final contentOffset = fbb.writeString(object.content);
        final tagsOffset = fbb.writeList(
          object.tags.map(fbb.writeString).toList(growable: false),
        );
        final embeddingOffset = object.embedding == null
            ? null
            : fbb.writeListFloat32(object.embedding!);
        fbb.startTable(8);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.documentId);
        fbb.addOffset(2, contentOffset);
        fbb.addInt64(3, object.length);
        fbb.addInt64(4, object.offset);
        fbb.addOffset(5, tagsOffset);
        fbb.addOffset(6, embeddingOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object = DocumentChunk()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..documentId = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            6,
            0,
          )
          ..content = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 8, '')
          ..length = const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
          ..offset = const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)
          ..tags = const fb.ListReader<String>(
            fb.StringReader(asciiOptimization: true),
            lazy: false,
          ).vTableGet(buffer, rootOffset, 14, [])
          ..embedding = const fb.ListReader<double>(
            fb.Float32Reader(),
            lazy: false,
          ).vTableGetNullable(buffer, rootOffset, 16);

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Document] entity fields to define ObjectBox queries.
class Document_ {
  /// See [Document.id].
  static final id = obx.QueryIntegerProperty<Document>(
    _entities[0].properties[0],
  );

  /// See [Document.name].
  static final name = obx.QueryStringProperty<Document>(
    _entities[0].properties[1],
  );

  /// See [Document.path].
  static final path = obx.QueryStringProperty<Document>(
    _entities[0].properties[2],
  );

  /// See [Document.length].
  static final length = obx.QueryIntegerProperty<Document>(
    _entities[0].properties[3],
  );

  /// See [Document.parsed].
  static final parsed = obx.QueryIntegerProperty<Document>(
    _entities[0].properties[4],
  );

  /// See [Document.tags].
  static final tags = obx.QueryStringVectorProperty<Document>(
    _entities[0].properties[5],
  );

  /// See [Document.chunks].
  static final chunks = obx.QueryIntegerProperty<Document>(
    _entities[0].properties[6],
  );

  /// See [Document.modelName].
  static final modelName = obx.QueryStringProperty<Document>(
    _entities[0].properties[7],
  );

  /// See [Document.lines].
  static final lines = obx.QueryIntegerProperty<Document>(
    _entities[0].properties[8],
  );

  /// See [Document.tokens].
  static final tokens = obx.QueryIntegerProperty<Document>(
    _entities[0].properties[9],
  );

  /// See [Document.time].
  static final time = obx.QueryIntegerProperty<Document>(
    _entities[0].properties[10],
  );

  /// See [Document.characters].
  static final characters = obx.QueryIntegerProperty<Document>(
    _entities[0].properties[11],
  );
}

/// [DocumentChunk] entity fields to define ObjectBox queries.
class DocumentChunk_ {
  /// See [DocumentChunk.id].
  static final id = obx.QueryIntegerProperty<DocumentChunk>(
    _entities[1].properties[0],
  );

  /// See [DocumentChunk.documentId].
  static final documentId = obx.QueryIntegerProperty<DocumentChunk>(
    _entities[1].properties[1],
  );

  /// See [DocumentChunk.content].
  static final content = obx.QueryStringProperty<DocumentChunk>(
    _entities[1].properties[2],
  );

  /// See [DocumentChunk.length].
  static final length = obx.QueryIntegerProperty<DocumentChunk>(
    _entities[1].properties[3],
  );

  /// See [DocumentChunk.offset].
  static final offset = obx.QueryIntegerProperty<DocumentChunk>(
    _entities[1].properties[4],
  );

  /// See [DocumentChunk.tags].
  static final tags = obx.QueryStringVectorProperty<DocumentChunk>(
    _entities[1].properties[5],
  );

  /// See [DocumentChunk.embedding].
  static final embedding = obx.QueryHnswProperty<DocumentChunk>(
    _entities[1].properties[6],
  );
}
